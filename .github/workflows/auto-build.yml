name: Build & Release macOS App

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-15
    env:
      GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: Select Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: üß± Build .app
        run: |
          xcodebuild -scheme InjectHub \
                     -project InjectHub.xcodeproj \
                     -configuration Release \
                     -derivedDataPath build \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO

      # - name: üì¶ Zip the .app
      #   run: |
      #     mkdir -p release
      #     APP_PATH=$(find build/Build/Products/Release -name "*.app" -maxdepth 1 | head -n 1)
      #     echo "App found at: $APP_PATH"
      #     cp -R "$APP_PATH" ./release/InjectHub.app
      #     pushd release > /dev/null
      #     zip -r InjectHub.zip InjectHub.app
      #     popd > /dev/null

      # - name: üöÄ Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: release/InjectHub.zip

      - name: üì¶ Prepare Release Folder
        run: |
          mkdir -p release/InjectHub-dmg
          APP_PATH=$(find build/Build/Products/Release -name "*.app" -maxdepth 1 | head -n 1)
          echo "‚úÖ App found at: $APP_PATH"
      
          # For zip ‚Äì only the app
          cp -R "$APP_PATH" release/InjectHub.app
      
          # For dmg ‚Äì app + install.sh
          cp -R "$APP_PATH" release/InjectHub-dmg/InjectHub.app
          cp install.sh release/InjectHub-dmg/install.sh
          chmod +x release/InjectHub-dmg/install.sh

      - name: üì¶ Create .zip Archive (app only)
        run: |
          pushd release > /dev/null
          zip -r InjectHub.zip InjectHub.app
          popd > /dev/null
      
      - name: üì¶ Create .dmg (app + script)
        run: |
          hdiutil create \
            -volname "InjectHub Installer" \
            -srcfolder "release/InjectHub-dmg" \
            -ov -format UDZO \
            release/InjectHub.dmg
      
      - name: üöÄ Create GitHub Release with both .zip and .dmg
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/InjectHub.zip
            release/InjectHub.dmg

      - name: üîç Extract version and build from Info.plist
        id: versioninfo
        run: |
          APP_PATH=$(find build/Build/Products/Release -name "InjectHub.app" -maxdepth 1 | head -n 1)
          echo "App found at: $APP_PATH"
          
          PLIST="$APP_PATH/Contents/Info.plist"
          echo "Using Info.plist at: $PLIST"
          /usr/libexec/PlistBuddy -c "Print" "$PLIST" # Optional debug line
      
          VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST")
          BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build=$BUILD" >> $GITHUB_OUTPUT

      - name: üìù Fetch release notes from GitHub
        id: releasenotes
        run: |
          RELEASE_NOTES=$(gh release view "${{ github.ref_name }}" --json body -q '.body')
          echo "$RELEASE_NOTES" > release_notes.txt
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÑ Generate update.json
        run: |
          VERSION="${{ steps.versioninfo.outputs.version }}"
          BUILD="${{ steps.versioninfo.outputs.build }}"
          NOTES=$(echo "${{ steps.releasenotes.outputs.notes }}" | jq -Rs .)
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/InjectHub.zip"
      
          jq -n \
            --arg version "$VERSION" \
            --arg build "$BUILD" \
            --arg notes "$NOTES" \
            --arg url "$DOWNLOAD_URL" \
            '{
              version: $version,
              build: $build,
              notes: $notes,
              download_url: $url
            }' > update.json

      - name: üìù Commit update.json to main
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
          git fetch origin main
          git checkout main
          git pull origin main
      
          mv update.json update.json
          git add update.json
          git commit -m "üîÑ Update update.json for version ${{ steps.versioninfo.outputs.version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Upload update.json to release assets (or push to a repo/branch/gh-pages)
      # - name: ‚¨ÜÔ∏è Upload update.json to release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: |
      #       release/InjectHub.zip
      #       update.json

